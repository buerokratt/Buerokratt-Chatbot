extractRequestData:
  assign:
    chatId: ${incoming.body.chatId}
    email: ${incoming.body.email}

getMessagesByChatId:
  call: http.post
  args:
    # TODO: replace with env variable
    url: http://resql:8082/get-chat-messages
    body:
      chatId: ${chatId}
  result: getMessagesByChatIdResult
  next: mapChatMessages

mapChatMessages:
  call: http.post
  args:
    # TODO: replace with env variable
    url: http://dmapper:3000/json/v2/format_chat_log
    body:
      data: ${getMessagesByChatIdResult.response.body}
  result: formattedChatMessages
  next: convertDataToPdf

convertDataToPdf:
  call: http.post
  args:
    # TODO: replace with env variable
    url: http://dmapper-v2:3005/js/convert/pdf
    body:
      data: ${formattedChatMessages.response.body}
  result: pdfFile
  next: checkPdfExists

checkPdfExists:
  switch:
    - condition: ${!!pdfFile.response.body && pdfFile.response.body !== null}
      next: checkIsEmailPresent
  next: returnFailure

checkIsEmailPresent:
  switch:
    - condition: ${email !== null}
      next: sendPdfToEmail
  next: returnFile

# TODO: Datamapper's email service needs to be updated to support attachments
sendPdfToEmail:
  call: http.post
  args:
    # TODO: replace with env variable
    url: http://dmapper-v2:3005/js/email/sendMockEmail
    body:
      to: ${email}
      subject: "Chat history"
      text: "Datamapper's email service needs to be updated to support attachments"
  result: emailResponseData
  next: returnSuccess

returnSuccess:
  return: "OK"
  next: end

returnFile:
  wrapper: false
  headers:
    Content-disposition: "attachment;filename=chat-history.pdf"
  return: "data:application/pdf;base64,${pdfFile.response.body.response}"
  next: end

returnFailure:
  return: "error: unable to generate PDF"
