extractRequestData:
  assign:
    cookie: ${incoming.headers.cookie}
    widgetAnimation: ${incoming.body.widgetAnimation}
    widgetProactiveSeconds: ${incoming.body.widgetProactiveSeconds}
    widgetDisplayBubbleMessageSeconds: ${incoming.body.widgetDisplayBubbleMessageSeconds}
    widgetBubbleMessageText: ${incoming.body.widgetBubbleMessageText}
    widgetColor: ${incoming.body.widgetColor}
    isWidgetActive: ${incoming.body.isWidgetActive}
  next: check_if_authorized 

check_if_authorized:
  template: templates/check-user-authority
  requestType: post
  headers:
    cookie: ${cookie}
  result: authority_result
  next: check_authority_result

check_authority_result:
  switch:
    - condition: ${authority_result !== "false"}
      next: setWidgetConfig
  next: returnUnauthorized  

setWidgetConfig:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]:[#CHATBOT_RESQL_PORT]/set-widget-config"
    body:
      widgetProactiveSeconds: ${widgetProactiveSeconds}
      widgetDisplayBubbleMessageSeconds: ${widgetDisplayBubbleMessageSeconds}
      widgetBubbleMessageText: ${widgetBubbleMessageText}
      widgetColor: ${widgetColor}
      isWidgetActive: ${isWidgetActive}
      widgetAnimation: ${widgetAnimation}
      created: ${new Date().toISOString()}
  result: setWidgetConfigResult
  next: mapWidgetConfigData

mapWidgetConfigData:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]:[#CHATBOT_DMAPPER_PORT]/json/v2/return_widget_config"
    body:
      configurationArray: ${setWidgetConfigResult.response.body}
  result: widgetConfigData
  next: returnSuccess

returnSuccess:
  return: ${widgetConfigData.response.body}
  next: end

returnInvalidBody:
  return: "error: invalid body"
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
