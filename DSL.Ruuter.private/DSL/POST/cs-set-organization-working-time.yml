extractRequestData:
  assign:
    cookie: ${incoming.headers.cookie}
    organizationWorkingTimeStartISO: ${incoming.body.organizationWorkingTimeStartISO}
    organizationWorkingTimeEndISO: ${incoming.body.organizationWorkingTimeEndISO}
    organizationWorkingTimeWeekdays: ${incoming.body.organizationWorkingTimeWeekdays}
    organizationWorkingTimeNationalHolidays: ${incoming.body.organizationWorkingTimeNationalHolidays}

extractTokenData:
  call: http.post
  args:
    # TODO: replace with env variable and correct path to TIM endpoint
    url: http://ruuter-v2-private:8088/mocks/mock-tim-custom-jwt-userinfo
    headers:
      cookie: ${cookie}
    body:
      # TODO: pass cookie name correctly to TIM
      cookieName: "customJwtCookie"
  result: jwtResult

validateAdministrator:
  switch:
    # TODO: use correct structure when request is made against TIM
    - condition: ${jwtResult.response.body.response.authorities.includes("ROLE_ADMINISTRATOR")}
      next: validateBody
  next: returnUnauthorized

validateBody:
  switch:
    - condition: "${!!(new Date(organizationWorkingTimeStartISO) && new Date(organizationWorkingTimeEndISO)) && typeof organizationWorkingTimeNationalHolidays === 'boolean' && typeof organizationWorkingTimeWeekdays === 'object'}"
      next: setOrganizationWorkingTime
  next: returnInvalidBody

setOrganizationWorkingTime:
  call: http.post
  args:
    # TODO: replace with env variable
    url: http://resql:8082/set-organization-working-time
    body:
      organizationWorkingTimeStartISO: ${organizationWorkingTimeStartISO}
      organizationWorkingTimeEndISO: ${organizationWorkingTimeEndISO}
      organizationWorkingTimeWeekdays: ${organizationWorkingTimeWeekdays.join(",")}
      organizationWorkingTimeNationalHolidays: ${organizationWorkingTimeNationalHolidays}
      created: ${new Date().toISOString()}
  result: setOrganizationWorkingTimeResult

mapOrganizationWorkingTimeData:
  call: http.post
  args:
    # TODO: replace with env variable
    url: http://dmapper-v2:3005/hbs/chat-bot/return_organization_working_time
    headers:
      type: json
    body:
      configurationArray: ${setOrganizationWorkingTimeResult.response.body}
  result: organizationWorkingTimeData
  next: returnSuccess

returnSuccess:
  return: ${organizationWorkingTimeData.response.body}
  next: end

returnInvalidBody:
  return: "error: invalid body"
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
