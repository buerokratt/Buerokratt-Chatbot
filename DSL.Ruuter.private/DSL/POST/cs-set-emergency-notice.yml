extractRequestData:
  assign:
    emergencyNoticeText: ${incoming.body.emergencyNoticeText}
    emergencyNoticeStartISO: ${incoming.body.emergencyNoticeStartISO}
    emergencyNoticeEndISO: ${incoming.body.emergencyNoticeEndISO}
    isEmergencyNoticeVisible: ${incoming.body.isEmergencyNoticeVisible}
  next: validateBody

validateBody:
  switch:
    - condition: "${!!(new Date(emergencyNoticeStartISO) && new Date(emergencyNoticeEndISO))}"
      next: setEmergencyNotice
  next: returnInvalidBody

setEmergencyNotice:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]:[#CHATBOT_RESQL_PORT]/set-emergency-notice"
    body:
      emergencyNoticeText: ${emergencyNoticeText}
      emergencyNoticeStartISO: ${emergencyNoticeStartISO}
      emergencyNoticeEndISO: ${emergencyNoticeEndISO}
      isEmergencyNoticeVisible: ${isEmergencyNoticeVisible}
      created: ${new Date().toISOString()}
  result: setEmergencyNoticeResult
  next: mapEmergencyNoticeData

mapEmergencyNoticeData:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]:[#CHATBOT_DMAPPER_PORT]/json/v2/return_emergency_notice"
    body:
      configurationArray: ${setEmergencyNoticeResult.response.body}
  result: emergencyNoticeData
  next: returnSuccess

returnSuccess:
  return: ${emergencyNoticeData.response.body}
  next: end

returnInvalidBody:
  return: "error: invalid body"
  next: end
