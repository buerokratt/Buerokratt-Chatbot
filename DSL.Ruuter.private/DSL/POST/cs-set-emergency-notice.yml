extractRequestData:
  assign:
    cookie: ${incoming.headers.cookie}
    emergencyNoticeText: ${incoming.body.emergencyNoticeText}
    emergencyNoticeStartISO: ${incoming.body.emergencyNoticeStartISO}
    emergencyNoticeEndISO: ${incoming.body.emergencyNoticeEndISO}
    isEmergencyNoticeVisible: ${incoming.body.isEmergencyNoticeVisible}

extractTokenData:
  call: http.post
  args:
    # TODO: replace with env variable and correct path to TIM endpoint
    url: http://ruuter-v2-private:8088/mocks/mock-tim-custom-jwt-userinfo
    headers:
      cookie: ${cookie}
    body:
      # TODO: pass cookie name correctly to TIM
      cookieName: "customJwtCookie"
  result: jwtResult

validateAdministrator:
  switch:
    # TODO: use correct structure when request is made against TIM
    - condition: ${jwtResult.response.body.response.authorities.includes("ROLE_ADMINISTRATOR")}
      next: validateBody
  next: returnUnauthorized

validateBody:
  switch:
    - condition: "${!!(new Date(emergencyNoticeStartISO) && new Date(emergencyNoticeEndISO))}"
      next: setEmergencyNotice
  next: returnInvalidBody

setEmergencyNotice:
  call: http.post
  args:
    # TODO: replace with env variable
    url: http://resql:8082/set-emergency-notice
    body:
      emergencyNoticeText: ${emergencyNoticeText}
      emergencyNoticeStartISO: ${emergencyNoticeStartISO}
      emergencyNoticeEndISO: ${emergencyNoticeEndISO}
      isEmergencyNoticeVisible: ${isEmergencyNoticeVisible}
      created: ${new Date().toISOString()}
  result: setEmergencyNoticeResult

mapEmergencyNoticeData:
  call: http.post
  args:
    # TODO: replace with env variable
    url: http://dmapper:3000/json/v2/return_emergency_notice
    body:
      configurationArray: ${setEmergencyNoticeResult.response.body}
  result: emergencyNoticeData
  next: returnSuccess

returnSuccess:
  return: ${emergencyNoticeData.response.body}
  next: end

returnInvalidBody:
  return: "error: invalid body"
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
