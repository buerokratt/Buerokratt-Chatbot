extractRequestData:
  assign:
    cookie: ${incoming.headers.cookie}
    userId: ${incoming.body.userId}
    forwardedChatPopupNotifications: ${incoming.body.forwardedChatPopupNotifications}
    forwardedChatSoundNotifications: ${incoming.body.forwardedChatSoundNotifications}
    forwardedChatEmailNotifications: ${incoming.body.forwardedChatEmailNotifications}
    newChatPopupNotifications: ${incoming.body.newChatPopupNotifications}
    newChatSoundNotifications: ${incoming.body.newChatSoundNotifications}
    newChatEmailNotifications: ${incoming.body.newChatEmailNotifications}
    useAutocorrect: ${incoming.body.useAutocorrect}
  next: check_if_authorized

check_if_authorized:
  template: templates/check-user-authority
  requestType: post
  headers:
    cookie: ${cookie}
  result: authority_result
  next: check_authority_result

check_authority_result:
  switch:
    - condition: ${authority_result !== "false"}
      next: setUserSettingValue
  next: returnUnauthorized    

setUserSettingValue:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]:[#CHATBOT_RESQL_PORT]/set-user-profile-settings"
    body:
      userId: ${userId}
      forwardedChatPopupNotifications: ${forwardedChatPopupNotifications}
      forwardedChatSoundNotifications: ${forwardedChatSoundNotifications}
      forwardedChatEmailNotifications: ${forwardedChatEmailNotifications}
      newChatPopupNotifications: ${newChatPopupNotifications}
      newChatSoundNotifications: ${newChatSoundNotifications}
      newChatEmailNotifications: ${newChatEmailNotifications}
      useAutocorrect: ${useAutocorrect}
  result: returnSuccess

returnSuccess:
  return: ${returnSuccess.response.body}
  next: end

returnInvalidBody:
  return: "error: invalid body"
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
