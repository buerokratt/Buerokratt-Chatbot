extractRequestData:
  assign:
    cookie: ${incoming.headers.cookie}
    userId: ${incoming.body.userId}

extractTokenData:
  call: http.post
  args:
    # TODO: replace with env variable and correct path to TIM endpoint
    url: http://byk-private-ruuter-yml:8080/mock-tim-custom-jwt-userinfo
    headers:
      cookie: ${cookie}
    body:
      # TODO: pass cookie name correctly to TIM
      cookieName: "customJwtCookie"
  result: jwtResult

validateAdministrator:
  switch:
    # TODO: use correct structure when request is made against TIM
    - condition: ${jwtResult.response.body.response.authorities.includes("ROLE_ADMINISTRATOR")}
      next: getUserSettings
  next: returnUnauthorized

getUserSettings:
  call: http.post
  args:
    # TODO: replace with env variable
    url: https://byk-resql:8443/get-user-profile-settings
    body:
      userId: ${userId}
  result: getUserSettingsResult

validateUserSettingsResultExists:
  switch:
    - condition: '${getUserSettingsResult.response.body.length > 0}'
      next: mapUserSettingsData
  next: returnNotFound

mapUserSettingsData:
  call: http.post
  args:
    # TODO: replace with env variable
    url: https://byk-dmapper:8443/json/v2/return_user_profile_settings
    body:
      settingsArray: ${getUserSettingsResult.response.body}
  result: userSettingsData
  next: returnSuccess

returnSuccess:
  return: ${userSettingsData.response.body}
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end

returnNotFound:
  return: "error: not found"
  next: end
