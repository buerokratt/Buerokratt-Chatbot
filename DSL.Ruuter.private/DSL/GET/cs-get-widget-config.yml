extractRequestData:
  assign:
    cookie: ${incoming.headers.cookie}

extractTokenData:
  call: http.post
  args:
    # TODO: replace with env variable and correct path to TIM endpoint
    url: http://ruuter-v2-private:8088/mocks/mock-tim-custom-jwt-userinfo
    headers:
      cookie: ${cookie}
    body:
      # TODO: pass cookie name correctly to TIM
      cookieName: "customJwtCookie"
  result: jwtResult

validateAdministrator:
  switch:
    # TODO: use correct structure when request is made against TIM
    - condition: ${jwtResult.response.body.response.authorities.includes("ROLE_ADMINISTRATOR")}
      next: getWidgetConfig
  next: returnUnauthorized

getWidgetConfig:
  call: http.post
  args:
    # TODO: replace with env variable
    url: http://resql:8082/get-widget-config
  result: getWidgetConfigResult

validateWidgetConfigExists:
  switch:
    - condition: "${getWidgetConfigResult.response.body.length > 0}"
      next: mapWidgetConfigData
  next: returnNotFound

mapWidgetConfigData:
  call: http.post
  args:
    # TODO: replace with env variable
    url: http://dmapper:3000/json/v2/return_widget_config
    body:
      configurationArray: ${getWidgetConfigResult.response.body}
  result: widgetConfigData
  next: returnSuccess

returnSuccess:
  return: ${widgetConfigData.response.body}
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end

returnNotFound:
  return: "error: not found"
  next: end
