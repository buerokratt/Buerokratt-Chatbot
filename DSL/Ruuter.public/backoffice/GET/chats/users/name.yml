declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'NAME'"
  method: get
  accepts: json
  returns: json
  namespace: backoffice
  allowlist:
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

get_tara_user_info:
  call: http.get
  args:
   url: "[#CHATBOT_TIM]/jwt/userinfo"
   contentType: plaintext
   headers:
    cookie: ${incoming.headers.cookie}
   plaintext: 
      "JWTTOKEN"
  result: tara_info
  next: assignUserInfo

assignUserInfo:
  assign:
    id: ${tara_info.response.body.personalCode}
    firstName: ${tara_info.response.body.firstName}
    lastName: ${tara_info.response.body.lastName}
    authMethod: ${tara_info.response.body.authMethod}
  next: get_chat_info

get_chat_info:
  call: http.post
  args:
   url: "[#CHATBOT_TIM]/jwt/custom-jwt-userinfo"
   contentType: plaintext
   headers:
    cookie: ${incoming.headers.cookie}
   plaintext:
      "chatJwt"
  result: infoRes
  next: check_chat_info_response

check_chat_info_response:
  switch:
    - condition: ${200 <= infoRes.response.statusCodeValue && infoRes.response.statusCodeValue < 300}
      next: assignChatId
  next: return_chat_not_exists

assignChatId:
  assign:
    chatId: ${infoRes.response.body.chatId}
  next: insertIdAndName

insertIdAndName:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/update-chat-with-end-user-id-and-name"
    body:
      chatId: ${chatId}
      endUserId: "${id ? id : ''}"
      endUserFirstName: "${firstName ? firstName : ''}"
      endUserLastName: "${lastName ? lastName : ''}"
  result: insertIdAndNameResult
  next: getUuid

getUuid:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER_HBS]/return_uuid"
    headers:
      type: json
  result: uuid_result
  next: assignUuid

assignUuid:
  assign:
    uuid: ${uuid_result.response.body.uuid}
  next: insertMessage  

insertMessage:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-message"
    body:
      chatId: ${chatId}
      messageId: ${uuid}
      content: ""
      authorTimestamp: ${new Date().toISOString()}
      authorId: ${id ?? ""}
      authorFirstName: ${firstName ?? ""}
      authorRole: "end-user"
      created: ${new Date().toISOString()}
      authorLastName: ${lastName ?? ""}
      rating: ""
      event: "user-authenticated"
      forwardedByUser: ""
      forwardedFromCsa: ""
      forwardedToCsa: ""
  result: insertMessageResult
  next: check_for_personal_code

check_for_personal_code:
  switch:
    - condition: ${id === null}
      next: notify_chats
  next: get_session_length

get_session_length:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-configuration"
    body:
      key: "session_length"
  result: session_result
  next: generate_cookie

generate_cookie:
  call: http.post
  args:
    url: "[#CHATBOT_TIM]/jwt/custom-jwt-generate"
    body:
      JWTName: "userJwt"
      expirationInMinutes: ${session_result.response.body[0]?.value ?? '120'}
      content: {
        "personalCode": "${id ?? ''}",
        "displayName": "${firstName ?? ''}",
        "firstName": "${firstName ?? ''}",
        "lastName": "${lastName ?? ''}",
        "authMethod": "${authMethod ?? ''}",
        "fullName": "${(firstName ?? '') + ' ' + (lastName ?? '')}"
      }
  result: cookie_result
  next: assign_cookie

assign_cookie:
  assign:
    setCookie:
      userJwt: ${cookie_result.response.body.token}
      Domain: "[#DOMAIN]"
      Secure: true
      HttpOnly: true
      SameSite: "Lax"
  next: notify_chats

notify_chats:
  template: "[#CHATBOT_PROJECT_LAYER]/chats/notify"
  requestType: templates
  body:
    chatId: ${chatId}
  result: chats_notify_res
  next: notify_messages

notify_messages:
  template: "[#CHATBOT_PROJECT_LAYER]/messages/notify"
  requestType: templates
  body:
    chatId: ${chatId}
    type: "message"
    messageId: ${uuid}
  result: messages_notify_res  
  next: check_for_id

check_for_id:
  switch:
    - condition: ${id === null}
      next: return_result
  next: return_result_with_cookie

return_result:
  return: Updated ${chatId} with ${id} and ${firstName} ${lastName}.
  next: end

return_result_with_cookie:
  headers:
    Set-Cookie: ${setCookie}
  return: Updated ${chatId} with ${id} and ${firstName} ${lastName}.
  next: end

return_chat_not_exists:
  return: "Chat does not exist"
  next: end
