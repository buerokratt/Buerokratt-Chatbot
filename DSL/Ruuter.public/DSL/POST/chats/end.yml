declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'END'"
  method: post
  accepts: json
  returns: json
  namespace: backoffice
  allowlist:
    body:
      - field: status
        type: string
        description: "Body field 'status'"
      - field: message
        type: json
        description: "Body field 'message'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

extractRequestData:
  assign:
    chatId: "${incoming.body.message.chatId}"
    event: "${incoming.body.message.event}"
    authorRole: ${incoming.body.message.authorRole}
    authorTimestamp: "${incoming.body.message.authorTimestamp}"
    status: "${incoming.body.status}"
  next: deleteMessagePreview

deleteMessagePreview:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/delete-message-preview"
    body:
      chatId: ${chatId}
      content: ""
  result: res
  next: getMessageUuid

getMessageUuid:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/return_uuid"
    headers:
      type: json
  result: message_uuid_result
  next: assignMessageUuid

assignMessageUuid:
  assign:
    messageUuid: ${message_uuid_result.response.body.uuid}
  next: getActiveChatById

getActiveChatById:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-active-chat-by-id"
    body:
      id: ${chatId}
  result: activeChatRes
  next: checkActiveChatResult

checkActiveChatResult:
  switch:
    - condition: ${activeChatRes.response.body.length > 0}
      next: assignChat
  next: return_chat_ended

assignChat:
  assign:
    activeChat: ${activeChatRes.response.body[0]}
  next: postMessage

postMessage:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-message"
    body:
      chatId: ${chatId}
      messageId: ${messageUuid}
      content: ""
      authorTimestamp: ${authorTimestamp}
      authorId: ""
      authorFirstName: ""
      authorLastName: ""
      authorRole: ${authorRole ?? "buerokratt"}
      created: ${new Date().toISOString()}
      rating: ""
      event: ${event}
      forwardedByUser: ""
      forwardedFromCsa: ""
      forwardedToCsa: ""
  result: message_res
  next: endChat

endChat:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-chat"
    body:
      id: ${activeChat.id}
      customerSupportId: ${activeChat.customerSupportId ?? ""}
      customerSupportDisplayName: ${activeChat.customerSupportDisplayName ?? ""}
      csaTitle: ${activeChat.csaTitle ?? ""}
      endUserId: ${activeChat.endUserId ?? ""}
      endUserFirstName: ${activeChat.endUserFirstName ?? ""}
      endUserLastName: ${activeChat.endUserLastName ?? ""}
      status: ${status ?? "ENDED"}
      created: ${activeChat.created ?? new Date().toISOString()}
      ended: ${new Date().toISOString()}
      feedbackRating: ${activeChat.feedbackRating ?? ""}
      feedbackText: ${activeChat.feedbackText ?? ""}
      endUserEmail: ${activeChat.endUserEmail ?? ""}
      endUserPhone: ${activeChat.endUserPhone ?? ""}
      endUserOs: ${activeChat.endUserOs ?? ""}
      endUserUrl: ${activeChat.endUserUrl ?? ""}
      externalId: ${activeChat.externalId ?? ""}
      forwardedTo: ${activeChat.forwardedTo ?? ""}
      forwardedToName: ${activeChat.forwardedToName ?? ""}
      receivedFrom: ${activeChat.receivedFrom ?? ""}
      receivedFromName: ${activeChat.receivedFromName ?? ""}
  result: end_chat_res
  next: blacklist_chat_jwt

blacklist_chat_jwt:
  call: http.post
  args:
    url: "[#CHATBOT_TIM]/jwt/custom-jwt-blacklist"
    contentType: plaintext
    headers:
      cookie: ${incoming.headers.cookie}
    plaintext: "chatJwt"
  result: chat_blacklist_res
  next: assign_chat_cookie

assign_chat_cookie:
  assign:
    chatCookie:
      chatJwt: null
      Domain: "[#DOMAIN]"
      Secure: true
      HttpOnly: true
      SameSite: "Lax"
      Max-Age: 0
  next: blacklist_client_jwt

blacklist_client_jwt:
  call: http.post
  args:
    url: "[#CHATBOT_TIM]/jwt/custom-jwt-blacklist"
    contentType: plaintext
    headers:
      cookie: ${incoming.headers.cookie}
    plaintext: "clientCustomJwtCookie"
  result: client_blacklist_res
  next: assign_client_cookie

assign_client_cookie:
  assign:
    clientCookie:
      clientCustomJwtCookie: null
      Domain: "[#DOMAIN]"
      Secure: true
      HttpOnly: true
      SameSite: "Lax"
      Max-Age: 0
  next: clearChatList

clearChatList:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_delete_by_query?conflicts=proceed"
    body:
      query:
        term:
          channelId: "chat-list"
  result: clear_chat_res
  next: postNotificationAboutAddedChat

postNotificationAboutAddedChat:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_doc"
    body:
      channelId: "chat-list"
      timestamp: ${new Date().toISOString()}
      payload: { "status": "Chat Status Changed", "chatId": "${chatId}" }
  result: chat_notification_result

remove_chat_id_from_queue_notification_node_if_existed:
  call: http.post
  args:
    url: "[#CHATBOT_NOTIFICATIONS]/dequeue"
    body:
      id: ${chatId}
  result: remove_chat_id_from_queue_notification_node_if_existed_res

return_result:
  headers:
    Set-Cookie: ${chatCookie}
  return: "Ended Chat Successfully"
  next: end

return_chat_ended:
  return: "Chat Has Ended"
  status: 400
  next: end
