declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'GREETING'"
  method: post
  accepts: json
  returns: json
  namespace: backoffice
  allowlist:
    body:
      - field: chatId
        type: string
        description: "Body field 'chatId'"
      - field: clientTimestamp
        type: string
        description: "Body field 'clientTimestamp'"

extractRequestData:
  assign:
    chatId: "${incoming.body.chatId}"
    clientTimestamp: "${incoming.body.clientTimestamp}"

getGreetingMessage:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-greeting-message"
  result: greeting_result

getUuid:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/return_uuid"
    headers:
      type: json
  result: uuid_result
  next: assignUuidAndGreetingMessage

assignUuidAndGreetingMessage:
  assign:
    uuid: ${uuid_result.response.body.uuid}
    greetingMessage: ${greeting_result.response.body[0].est}
  next: insertGreetingMessage  

insertGreetingMessage:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-message"
    body:
      chatId: ${chatId}
      messageId: ${uuid}
      content: ${greetingMessage}
      authorTimestamp: ${new Date().toISOString()}
      authorRole: "buerokratt"
      created: ${new Date().toISOString()}
      event: "greeting"
      authorId: ""
      authorFirstName: ""
      authorLastName: ""
      rating: ""
      forwardedByUser: ""
      forwardedFromCsa: ""
      forwardedToCsa: ""
  result: insertMessageResult
  next: returnSuccess  

returnSuccess:
  return: "Greeting Message Sent Successfully"
  next: end
