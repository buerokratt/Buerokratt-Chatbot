extractRequestData:
  assign:
    authorRole: ${incoming.body.message.authorRole}
    authorTimestamp: ${incoming.body.message.authorTimestamp}
    content: ${incoming.body.message.content}
    endUserId: ""
    endUserEmail: ""
    endUserPhone: ""
    endUserOs: ${incoming.body.endUserTechnicalData.endUserOs}
    endUserUrl: ${incoming.body.endUserTechnicalData.endUserUrl}
    forwardedByUser: ""
    forwardedFromCsa: ""
    forwardedToCsa: ""
    holidays: ${incoming.body.holidays}
    holidayNames: ${incoming.body.holidayNames}
  next: getChatUuid

getChatUuid:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/return_uuid"
    headers:
      type: json
  result: chat_uuid_result
  next: assignChatUuid

assignChatUuid:
  assign:
    chatUuid: ${chat_uuid_result.response.body.uuid}
  next: getMessageUuid  

getMessageUuid:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/return_uuid"
    headers:
      type: json
  result: message_uuid_result
  next: assignMessageUuid

assignMessageUuid:
  assign:
    messageUuid: ${message_uuid_result.response.body.uuid}
  next: get_session_length  

get_session_length:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-configuration"
    body:
      key: "session_length"
  result: session_result
  next: generate_cookie

generate_cookie:
  call: http.post
  args:
    url: "[#CHATBOT_TIM]/jwt/custom-jwt-generate"
    body:
      JWTName: "chatJwt"
      expirationInMinutes: ${session_result.response.body[0].value}
      content: {
        "chatId": "${chatUuid}",
        "forwardTo": ""   
      }
  result: cookie_result
  next: assign_cookie

assign_cookie:
  assign:
    setCookie:
      chatJwt: ${cookie_result.response.body.token}
      Domain: "[#DOMAIN]"
      Secure: false
      HttpOnly: false
  next: postGreetingMessage

postGreetingMessage:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC]/greeting-to-chat"
    body:
      chatId: ${chatUuid}
      authorTimestamp: ${authorTimestamp}
  result: greeting_result
  next: postClientMessage

postClientMessage:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-message"
    body:
      chatId: ${chatUuid}
      messageId: ${messageUuid}
      content: ${content}
      event: ""
      authorTimestamp: ${authorTimestamp}
      authorId: ${endUserId}
      authorFirstName: ""
      authorRole: ${authorRole}
      created: ${new Date().toISOString()}
      authorLastName: ""
      rating: ""
      forwardedByUser: ${forwardedByUser}
      forwardedFromCsa: ${forwardedFromCsa}
      forwardedToCsa: ${forwardedToCsa}
  result: insertMessageResult
  next: insertChat

insertChat:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/init-chat"
    body:
      id: ${chatUuid}
      endUserId: ${endUserId}
      endUserFirstName: ""
      endUserLastName: ""
      status: "OPEN"
      lastMessage: ${content}
      created: ${new Date().toISOString()}
      ended: ""
      feedbackRating: ""
      feedbackText: ""
      endUserEmail: ${endUserEmail}
      endUserPhone: ${endUserPhone}
      endUserOs: ${endUserOs}
      endUserUrl: ${endUserUrl}
      externalId: ""
      forwardedTo: ""
      forwardedToName: ""
      receivedFrom: ""
      receivedFromName: ""
  result: insertMessageResult
  next: postMessageToBot

postMessageToBot:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC]/message-to-bot"
    body:
      chatId: ${chatUuid}
      content: ${content}
      holidays: ${holidays}
      holidayNames: ${holidayNames}
  result: message_to_bot_result
  next: getChat

getChat:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-chat-by-id"
    body:
      id: ${chatUuid}
  result: chat_result
  next: clearChatList

clearChatList:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_delete_by_query?conflicts=proceed"
    body:
     query:
      term:
       channelId: "chat-list"
  result: clear_chat_res
  next: postNotificationAboutAddedChat 

postNotificationAboutAddedChat:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_doc"
    body:
     channelId: "chat-list"
     timestamp: ${new Date().toISOString()}
     payload: {
        "status": "Chat Status Changed",
        "chatId": "${chatUuid}"
     }
  result: chat_notification_result
  next: clearMessages

clearMessages:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_delete_by_query?conflicts=proceed"
    body:
     query:
      term:
       channelId: ${chatUuid}
  result: clear_messages_res
  next: postNotificationAboutMessageResponse 

postNotificationAboutMessageResponse:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_doc"
    body:
     channelId: ${chatUuid}
     timestamp: ${new Date().toISOString()}
     payload: {
        "type": "message",
        "messageId": "${messageUuid}"
     }
  result: message_notification_result
  next: return_result  

return_result:
  headers:
    Set-Cookie: ${setCookie}
  return: ${chat_result.response.body[0]}
  next: end
