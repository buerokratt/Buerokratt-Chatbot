extract_body:
  assign:
    content: ${incoming.body.content}
    chatId: ${incoming.body.chatId}
    authorId: ${incoming.body.authorId}
    botResponse: ${incoming.body.botResponse}

check_if_bot_detected_a_common_service:
  switch:
    - condition: ${content.match(/^OPENSEARCH/) != null}
      next: assign_open_search
    - condition: ${content.match(/^REVENUEOPENSEARCH/) != null}
      next: assign_revenue_open_search
    - condition: ${content.match(/^NATIONALTAXOPENSEARCH/) != null}
      next: assign_taxes_open_search
    - condition: ${content.match(/^WORKFORCETAXOPENSEARCH/) != null}
      next: assign_workforce_tax_open_search
    - condition: ${content.match(/^BENEFICIARIESOPENSEARCH/) != null}
      next: assign_beneficiaries_open_search
    - condition: ${content.match(/^RELATEDPEOPLEOPENSEARCH/) != null}
      next: assign_related_people_open_search
    - condition: ${content.match(/^COMPANYDETAILSOPENSEARCH/) != null}
      next: assign_company_details_open_search
    - condition: ${content.match(/^SIMPLECOMPANYOPENSEARCH/) != null}
      next: assign_simple_company_open_search
  next: return_no_common_service_detected

assign_open_search:
  assign:
    message: ${content.match(/^OPENSEARCH(.*)/)}
    buttonPrefix: "#employees"
  next: search_with_message

assign_revenue_open_search:
  assign:
    name: ${content.match(/^REVENUEOPENSEARCH(.*)/)}
    buttonPrefix: "#revenue"
  next: search_with_name
  
assign_taxes_open_search:
  assign:
    message: ${content.match(/^NATIONALTAXOPENSEARCH(.*)/)}
    buttonPrefix: "#taxes"
  next: search_with_message

assign_workforce_tax_open_search:
  assign:
    message: ${content.match(/^WORKFORCETAXOPENSEARCH(.*)/)}
    buttonPrefix: "#workforcetaxes"
  next: search_with_message

assign_beneficiaries_open_search:
  assign:
    message: ${content.match(/^BENEFICIARIESOPENSEARCH(.*)/)}
    buttonPrefix: "#beneficiaries"
  next: search_with_message

assign_related_people_open_search:
  assign:
    message: ${content.match(/^RELATEDPEOPLEOPENSEARCH(.*)/)}
    buttonPrefix: "#relatedpersons"
  next: search_with_message

assign_company_details_open_search:
  assign:
    message: ${content.match(/^COMPANYDETAILSOPENSEARCH(.*)/)}
    buttonPrefix: "#companycontacts"
  next: search_with_message

assign_simple_company_open_search:
  assign:
    message: ${content.match(/^SIMPLECOMPANYOPENSEARCH(.*)/)}
    buttonPrefix: "companydatasimple"
  next: search_with_message

search_with_message:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/search"
    body:
      message: ${message}
  result: search_res
  next: extract_companies

search_with_name:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/search"
    body:
      name: ${name}
  result: search_res
  next: extract_companies

extract_companies:
  assign:
    companies: ${search_res.response.body.response.companies}

addButtonsToFirstBotMessage:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/add_buttons_to_first_message"
    headers:
      type: json
    body:
      messages: ${botResponse}
      ignoreTexts:
        [
          "OPENSEARCH",
          "REVENUEOPENSEARCH",
          "NATIONALTAXOPENSEARCH",
          "WORKFORCETAXOPENSEARCH",
          "BENEFICIARIESOPENSEARCH",
          "RELATEDPEOPLEOPENSEARCH",
          "COMPANYDETAILSOPENSEARCH",
          "SIMPLECOMPANYOPENSEARCH",
        ]
      prefix: ${buttonPrefix}
      companies: ${companies}
  result: merged_messages_res

extractMergedResult:
  assign:
    botMsg: ${merged_messages_res.response.body}

format_messages:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/bot_responses_to_messages"
    headers:
      type: json
    body:
      data:
        {
          "botMessages": "${botMsg}",
          "chatId": "${chatId}",
          "authorId": "${authorId}",
          "authorFirstName": "",
          "authorLastName": "",
          "authorTimestamp": "${new Date().toISOString()}",
          "created": "${new Date().toISOString()}",
        }
  result: res

return_result:
  return: ${res}
  next: end

return_no_common_service_detected:
  return: "No common services detected"
  next: end
