declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'MESSAGE-TO-BOT'"
  method: post
  accepts: json
  returns: json
  namespace: backoffice
  allowlist:
    body:
      - field: chatId
        type: string
        description: "Body field 'chatId'"
      - field: content
        type: string
        description: "Body field 'content'"
      - field: holidayNames
        type: string
        description: "Body field 'holidayNames'"
      - field: holidays
        type: string
        description: "Body field 'holidays'"

extractRequestData:
  assign:
    chatId: ${incoming.body.chatId}
    content: ${incoming.body.content}
    holidays: ${incoming.body.holidays}
    holidayNames: ${incoming.body.holidayNames}
  next: check_bot_is_active

check_bot_is_active:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-configuration"
    body:
      key: "is_bot_active"
  result: is_bot_active_result
  next: check_for_bot_active_result

check_for_bot_active_result:
  switch:
    - condition: ${is_bot_active_result.response.body[0]?.value === 'true'}
      next: get_bot_name
  next: return_bot_is_not_active

get_bot_name:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-configuration"
    body:
      key: "bot_institution_id"
  result: get_bot_name_result
  next: check_for_bot_name_result

check_for_bot_name_result:
  switch:
    - condition: ${200 <= get_bot_name_result.response.statusCodeValue && get_bot_name_result.response.statusCodeValue < 300 && get_bot_name_result.response.body[0]?.value != null}
      next: get_chat
  next: return_bad_request

get_chat:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-chat-by-id"
    body:
      id: ${chatId}
  result: get_chat_result
  next: check_for_get_chat_result

check_for_get_chat_result:
  switch:
    - condition: ${200 <= get_chat_result.response.statusCodeValue && get_chat_result.response.statusCodeValue < 300}
      next: check_chat_belongs_to_bot
  next: return_bad_request

check_chat_belongs_to_bot:
  switch:
    - condition: ${get_chat_result.response.body[0].customerSupportId == get_bot_name_result.response.body[0].value}
      next: post_message_to_client
  next: return_chat_does_not_belong_to_bot

post_message_to_client:
  call: http.post
  args:
    url: "[#CHATBOT_BOT]/webhooks/rest/webhook"
    body:
      sender: ${chatId}
      message: ${content}
  result: post_message_to_client_result
  next: check_for_post_message_to_client_result

check_for_post_message_to_client_result:
  switch:
    - condition: ${200 <= post_message_to_client_result.response.statusCodeValue && post_message_to_client_result.response.statusCodeValue < 300}
      next: check_if_bot_is_unable_to_reply
  next: return_bad_request

check_if_bot_is_unable_to_reply:
  switch:
    - condition: ${post_message_to_client_result.response.body[0].text == 'UNKNOWN'}
      next: check_for_fallback_bot
    - condition: ${post_message_to_client_result.response.body[0].text == 'Suunan teid klienditeenindajale. Varuge natukene kannatust.'}
      next: get_organization_working_details
  next: extract_bot_responses

check_for_fallback_bot:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL]/internal/external-bot"
    body:
      sender: ${chatId}
      message: ${content}
  result: fallback_bot_result
  next: check_if_fallback_bot_is_unable_to_reply

check_if_fallback_bot_is_unable_to_reply:
  switch:
    - condition: ${fallback_bot_result.response.body.response[0].text == 'Vabandust, kuid ma ei saa teie küsimusest aru. Kas saaksite palun selgitada, mida soovite teada saada või kuidas saaksin teid aidata?'}
      next: get_organization_working_details
  next: convert_fallback_bot_responses_to_messages

get_organization_working_details:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-is-organization-available"
    body:
      holidays: ${holidays}
      holiday_names: ${holidayNames}
      current_timestamp: ${new Date().toISOString()}
  result: org_res
  next: assign_organization_details

assign_organization_details:
  assign:
    org_details: ${org_res.response.body[0]}
  next: check_if_organization_is_available

check_if_organization_is_available:
  switch:
    - condition: ${org_details.isWithinWorkingTime === true && org_details.isWithinWorkingDays === true && org_details.isAllowedToWorkAtHolidays === true}
      next: get_all_available_csas
    - condition: ${org_details.isWithinWorkingTime === true && org_details.isWithinWorkingDays === true && org_details.isAllowedToWorkAtHolidays === false && org_details.isHoliday == true}
      next: return_is_a_holiday
    - condition: ${org_details.isWithinWorkingTime === true && org_details.isWithinWorkingDays === true && org_details.isAllowedToWorkAtHolidays === false && org_details.isHoliday == false}
      next: get_all_available_csas
  next: return_organization_is_not_available

return_is_a_holiday:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-bot-message"
    body:
      messages:
        - 
          chatId: ${chatId}
          content: ${org_details.holidayMessage}
          authorTimestamp: ${new Date().toISOString()}
          event: "unavailable_holiday"
          authorId: ${get_bot_name_result.response.body[0].value}
          authorFirstName: ""
          authorLastName: ""
          created: ${new Date().toISOString()}
  result: is_a_holiday_result
  next: return_is_holiday

return_organization_is_not_available:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-bot-message"
    body:
      messages:
        - 
          chatId: ${chatId}
          content: "Bürokratt on hetkel väljaspool tööaega, palun jäta oma kontaktandmed ja võtame Sinuga esimesel võimalusel ühendust"
          authorTimestamp: ${new Date().toISOString()}
          event: "unavailable_organization"
          authorId: ${get_bot_name_result.response.body[0].value}
          authorFirstName: ""
          authorLastName: ""
          created: ${new Date().toISOString()}
  result: organization_is_not_available_result
  next: return_organization_is_not_available_res

get_all_available_csas:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-all-available-customer-support-agents"
  result: csas_res
  next: assign_available_csas

assign_available_csas:
  assign:
    available_csas: ${csas_res.response.body.length}
  next: check_if_csas_are_available

check_if_csas_are_available:
  switch:
    - condition: ${available_csas == 0}
      next: send_csas_not_available_message
  next: redirect_chat_to_back_office

send_csas_not_available_message:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-bot-message"
    body:
      messages:
        - 
          chatId: ${chatId}
          content: "Hetkel nõustajad puuduvad, palun jätke oma kontaktandmed ja võtame Teiega esimesel võimalusel ühendust"
          authorTimestamp: ${new Date().toISOString()}
          event: "unavailable_csas"
          authorId: ${get_bot_name_result.response.body[0].value}
          authorFirstName: ""
          authorLastName: ""
          created: ${new Date().toISOString()}
  result: csas_not_available_message_result
  next: return_csa_is_not_available

redirect_chat_to_back_office:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/remove_cs_agent_from_chat"
    body:
      chatId: ${chatId}
  result: redirect_chat_to_back_office_result

add_chat_id_to_queue_notification_node:
  call: http.post
  args:
    url: "[#CHATBOT_NOTIFICATIONS]/enqueue"
    body:
      id: ${chatId}
  result: add_chat_id_to_queue_notification_node_res

extract_bot_responses:
  assign:
    botMsg: ${post_message_to_client_result.response.body}

check_if_bot_message_start_with_hash:
  switch:
    - condition: ${botMsg[0].text.startsWith('#')}
      next: call_service
  next: convert_bot_responses_to_messages

call_service:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL]/internal/call-service"
    body:
      chatId: ${chatId}
      msg: ${botMsg}
      authorId: ${get_bot_name_result.response.body[0].value}
  result: call_service_result

check_if_call_service_result_is_ok:
  switch:
    - condition: ${call_service_result.response.statusCodeValue >= 400}
      next: return_trigger_service_is_not_exist
  next: return_ok

return_ok:
  status: 200
  return: "Service called successfully"
  next: end

return_trigger_service_is_not_exist:
  assign:
    botMsg: "service_currently_unavailable"

convert_bot_responses_to_messages:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/bot_responses_to_messages"
    headers:
      type: json
    body:
      data:
        {
          "botMessages": "${botMsg}",
          "chatId": "${chatId}",
          "authorId": "${get_bot_name_result.response.body[0].value}",
          "authorFirstName": "",
          "authorLastName": "",
          "authorTimestamp": "${new Date().toISOString()}",
          "created": "${new Date().toISOString()}",
        }
  result: converted_messages_res
  next: add_bot_message_to_db

convert_fallback_bot_responses_to_messages:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/bot_responses_to_messages"
    headers:
      type: json
    body:
      data:
        {
          "botMessages": "${fallback_bot_result.response.body.response}",
          "chatId": "${chatId}",
          "authorId": "${get_bot_name_result.response.body[0].value}",
          "authorFirstName": "",
          "authorLastName": "",
          "authorTimestamp": "${new Date().toISOString()}",
          "created": "${new Date().toISOString()}",
        }
  result: converted_messages_res
  next: add_bot_message_to_db

add_bot_message_to_db:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-bot-message"
    body:
      messages: ${converted_messages_res.response.body}
  result: add_bot_message_to_bot_result
  next: return_message_sent

return_is_holiday:
  status: 200
  return: "Today is a national holiday"
  next: end

return_organization_is_not_available_res:
  status: 200
  return: "Organization is not available"
  next: end

return_csa_is_not_available:
  status: 200
  return: "CSA's are not available"
  next: end

return_message_sent:
  status: 200
  return: "Message Sent Successfully"
  next: end

return_chat_does_not_belong_to_bot:
  status: 200
  return: "Chat does not belong to bot"
  next: end

return_bot_is_not_active:
  status: 200
  return: "Bot is not active"
  next: end

return_bad_request:
  status: 400
  return: "Bad Request"
  next: end

return_incorrect_request:
  status: 400
  return: "Required parameter(s) missing"
  next: end
