declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'MESSAGE-TO-BOT'"
  method: post
  accepts: json
  returns: json
  namespace: backoffice
  allowlist:
    body:
      - field: chatId
        type: string
        description: "Body field 'chatId'"
      - field: content
        type: string
        description: "Body field 'content'"
      - field: holidayNames
        type: string
        description: "Body field 'holidayNames'"
      - field: holidays
        type: string
        description: "Body field 'holidays'"

extractRequestData:
  assign:
    chatId: ${incoming.body.chatId}
    content: ${incoming.body.content ?? ""}
    holidays: ${incoming.body.holidays}
    holidayNames: ${incoming.body.holidayNames}

check_bot_is_active:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-configuration"
    body:
      key: "is_bot_active"
  result: is_bot_active_result

check_for_bot_active_result:
  switch:
    - condition: ${is_bot_active_result.response.body[0]?.value === 'true'}
      next: get_bot_name
  next: return_bot_is_not_active

get_bot_name:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-configuration"
    body:
      key: "bot_institution_id"
  result: get_bot_name_result

check_for_bot_name_result:
  switch:
    - condition: ${200 <= get_bot_name_result.response.statusCodeValue && get_bot_name_result.response.statusCodeValue < 300 && get_bot_name_result.response.body[0]?.value != null}
      next: get_chat
  next: return_bad_request

get_chat:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-chat-by-id"
    body:
      id: ${chatId}
  result: get_chat_result
  next: check_for_get_chat_result

check_for_get_chat_result:
  switch:
    - condition: ${200 <= get_chat_result.response.statusCodeValue && get_chat_result.response.statusCodeValue < 300}
      next: check_chat_belongs_to_bot
  next: return_bad_request

check_chat_belongs_to_bot:
  switch:
    - condition: ${get_chat_result.response.body[0].customerSupportId == get_bot_name_result.response.body[0].value}
      next: decode_content_to_be_sent_to_bot
  next: return_chat_does_not_belong_to_bot

decode_content_to_be_sent_to_bot:
  assign:
    decodedContent: ${decodeURIComponent(content)}

skip_rasa_switch:
  switch:
    - condition: ${content.match(/^#revenue/) != null}
      next: common_service_revenue2
    - condition: ${content.match(/^#employees/) != null}
      next: common_service2
    - condition: ${content.match(/^#taxes/) != null}
      next: common_service_national_tax2
    - condition: ${content.match(/^#workforcetaxes/) != null}
      next: common_service_workforce_tax2
    - condition: ${content.match(/^#beneficiaries/) != null}
      next: common_service_beneficiaries2
    - condition: ${content.match(/^#relatedpersons/) != null}
      next: common_service_related_people2
    - condition: ${content.match(/^#companydata/) != null}
      next: common_service_company_details2
    - condition: ${content.match(/^#companydatasimple/) != null}
      next: common_service_simple_company2

post_message_to_bot:
  call: http.post
  args:
    url: "[#CHATBOT_BOT]/webhooks/rest/webhook"
    body:
      sender: ${chatId}
      message: ${decodedContent}
  result: post_message_to_bot_result

check_for_post_message_to_bot_result:
  switch:
    - condition: ${200 <= post_message_to_bot_result.response.statusCodeValue && post_message_to_bot_result.response.statusCodeValue < 300}
      next: check_if_bot_is_unable_to_reply
  next: return_bot_error

check_if_bot_is_unable_to_reply:
  switch:
    - condition: ${post_message_to_bot_result.response.body?.[0]?.text == 'UNKNOWN'}
      next: check_for_fallback_bot
    - condition: ${post_message_to_bot_result.response.body?.[0]?.text == 'Suunan teid klienditeenindajale. Varuge natukene kannatust.'}
      next: get_organization_working_details
    - condition: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^OPENSEARCH/) != null}
      next: common_service1
    - condition: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^REVENUEOPENSEARCH/) != null}
      next: common_service_revenue1
    - condition: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^NATIONALTAXOPENSEARCH/) != null}
      next: common_service_national_tax1
    - condition: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^WORKFORCETAXOPENSEARCH/) != null}
      next: common_service_workforce_tax1
    - condition: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^BENEFICIARIESOPENSEARCH/) != null}
      next: common_service_beneficiaries1
    - condition: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^RELATEDPEOPLEOPENSEARCH/) != null}
      next: common_service_related_people1
    - condition: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^COMPANYDETAILSOPENSEARCH/) != null}
      next: common_service_company_details1
    - condition: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^SIMPLECOMPANYOPENSEARCH/) != null}
      next: common_service_simple_company1
  next: extract_bot_responses

common_service1:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/search"
    body:
      message: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^OPENSEARCH(.*)/)}
  result: common_service_revenue1_result
  next: extract_bot_responses_service1_with_buttons

common_service2:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/employees"
    body:
      message: ${content.match(/^#employees (.*)/)[1]}
  result: post_message_to_bot_result
  next: extract_bot_responses_opensearch

common_service_revenue1:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/search"
    body:
      name: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^REVENUEOPENSEARCH(.*)/)}
  result: common_service_revenue1_result
  next: extract_bot_responses_revenue_with_buttons

common_service_revenue2:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/revenue"
    body:
      registry_code: "${content.match(/^#revenue (.*)/)[1]}"
  result: post_message_to_bot_result
  next: extract_bot_responses_opensearch

common_service_national_tax1:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/search"
    body:
      message: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^NATIONALTAXOPENSEARCH(.*)/)}
  result: common_service_revenue1_result
  next: extract_bot_responses_national_tax_with_buttons

common_service_national_tax2:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/national-taxes"
    body:
      message: ${content.match(/^#taxes (.*)/)[1]}
  result: post_message_to_bot_result
  next: extract_bot_responses_opensearch

common_service_workforce_tax1:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/search"
    body:
      message: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^WORKFORCETAXOPENSEARCH(.*)/)}
  result: common_service_revenue1_result
  next: extract_bot_responses_workforce_tax_with_buttons

common_service_workforce_tax2:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/work-force-taxes"
    body:
      message: ${content.match(/^#workforcetaxes (.*)/)[1]}
  result: post_message_to_bot_result
  next: extract_bot_responses_opensearch

common_service_beneficiaries1:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/search"
    body:
      message: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^BENEFICIARIESOPENSEARCH(.*)/)}
  result: common_service_revenue1_result
  next: extract_bot_responses_beneficiaries_with_buttons

common_service_beneficiaries2:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/company-beneficial-owners"
    body:
      message: ${content.match(/^#beneficiaries (.*)/)[1]}
  result: post_message_to_bot_result
  next: extract_bot_responses_opensearch

common_service_related_people1:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/search"
    body:
      message: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^RELATEDPEOPLEOPENSEARCH(.*)/)}
  result: common_service_revenue1_result
  next: extract_bot_responses_related_people_with_buttons

common_service_related_people2:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/company-related-persons"
    body:
      message: ${content.match(/^#relatedpersons (.*)/)[1]}
  result: post_message_to_bot_result
  next: extract_bot_responses_opensearch

common_service_company_details1:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/search"
    body:
      message: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^COMPANYDETAILSOPENSEARCH(.*)/)}
  result: common_service_revenue1_result
  next: extract_bot_responses_company_details_with_buttons

common_service_company_details2:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/detailed-company-data"
    body:
      message: ${content.match(/^#companydata (.*)/)[1]}
  result: post_message_to_bot_result
  next: extract_bot_responses_opensearch

common_service_simple_company1:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/search"
    body:
      message: ${post_message_to_bot_result.response.body?.[0]?.text.match(/^SIMPLECOMPANYOPENSEARCH(.*)/)}
  result: common_service_revenue1_result
  next: extract_bot_responses_simple_company_with_buttons

common_service_simple_company2:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL_CS]/services/companies/simple-company-data"
    body:
      message: ${content.match(/^#companydatasimple (.*)/)[1]}
  result: post_message_to_bot_result
  next: extract_bot_responses_opensearch

check_for_fallback_bot:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PUBLIC_INTERNAL]/internal/external-bot"
    body:
      sender: ${chatId}
      message: ${content}
  result: fallback_bot_result
  next: check_for_fallback_bot_result

check_for_fallback_bot_result:
  switch:
    - condition: ${200 <= fallback_bot_result.statusCodeValue && fallback_bot_result.statusCodeValue < 300}
      next: check_if_fallback_bot_is_unable_to_reply
  next: return_bot_error

check_if_fallback_bot_is_unable_to_reply:
  switch:
    - condition: ${fallback_bot_result == 'ERROR'}
      next: check_if_user_wants_csa
  next: convert_fallback_bot_responses_to_messages

check_if_user_wants_csa:
  call: http.post
  args:
    url: "[#CHATBOT_BOT]/webhooks/rest/webhook"
    body:
      sender: ${chatId}
      message: "csa"
  result: post_message_to_bot_result
  next: check_for_post_message_to_bot_result

get_organization_working_details:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-is-organization-available"
    body:
      holidays: ${holidays}
      holiday_names: ${holidayNames}
      current_timestamp: ${new Date().toISOString()}
  result: org_res
  next: assign_organization_details

assign_organization_details:
  assign:
    org_details: ${org_res.response.body[0]}
  next: check_if_organization_is_available

check_if_organization_is_available:
  switch:
    - condition: ${org_details.isWithinWorkingTime === true && org_details.isWithinWorkingDays === true && org_details.isAllowedToWorkAtHolidays === true}
      next: get_all_available_csas
    - condition: ${org_details.isWithinWorkingTime === true && org_details.isWithinWorkingDays === true && org_details.isAllowedToWorkAtHolidays === false && org_details.isHoliday == true}
      next: return_is_a_holiday
    - condition: ${org_details.isWithinWorkingTime === true && org_details.isWithinWorkingDays === true && org_details.isAllowedToWorkAtHolidays === false && org_details.isHoliday == false}
      next: get_all_available_csas
  next: return_organization_is_not_available

return_is_a_holiday:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-bot-message"
    body:
      messages:
        -
          chatId: ${chatId}
          content: ${org_details.holidayMessage}
          authorTimestamp: ${new Date().toISOString()}
          event: "unavailable_holiday"
          authorId: ${get_bot_name_result.response.body[0].value}
          authorFirstName: ""
          authorLastName: ""
          created: ${new Date().toISOString()}
  result: is_a_holiday_result
  next: return_is_holiday

return_organization_is_not_available:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-bot-message"
    body:
      messages:
        -
          chatId: ${chatId}
          content: "Bürokratt on hetkel väljaspool tööaega, palun jäta oma kontaktandmed ja võtame Sinuga esimesel võimalusel ühendust"
          authorTimestamp: ${new Date().toISOString()}
          event: "unavailable_organization"
          authorId: ${get_bot_name_result.response.body[0].value}
          authorFirstName: ""
          authorLastName: ""
          created: ${new Date().toISOString()}
  result: organization_is_not_available_result
  next: return_organization_is_not_available_res

get_all_available_csas:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-all-available-customer-support-agents"
  result: csas_res
  next: assign_available_csas

assign_available_csas:
  assign:
    available_csas: ${csas_res.response.body.length}
  next: check_if_csas_are_available

check_if_csas_are_available:
  switch:
    - condition: ${available_csas == 0}
      next: send_csas_not_available_message
  next: redirect_chat_to_back_office

send_csas_not_available_message:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-bot-message"
    body:
      messages:
        -
          chatId: ${chatId}
          content: "Hetkel nõustajad puuduvad, palun jätke oma kontaktandmed ja võtame Teiega esimesel võimalusel ühendust"
          authorTimestamp: ${new Date().toISOString()}
          event: "unavailable_csas"
          authorId: ${get_bot_name_result.response.body[0].value}
          authorFirstName: ""
          authorLastName: ""
          created: ${new Date().toISOString()}
  result: csas_not_available_message_result
  next: return_csa_is_not_available

redirect_chat_to_back_office:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/remove_cs_agent_from_chat"
    body:
      chatId: ${chatId}
  result: redirect_chat_to_back_office_result

add_chat_id_to_queue_notification_node:
  call: http.post
  args:
    url: "[#CHATBOT_NOTIFICATIONS]/enqueue"
    body:
      id: ${chatId}
  result: add_chat_id_to_queue_notification_node_res

extract_bot_responses_after_redirect_to_back_office:
  assign:
    botMsg: ${post_message_to_bot_result.response.body}
  next: convert_bot_responses_to_messages

extract_bot_responses_opensearch:
  assign:
    botMsg: ${[post_message_to_bot_result.response.body.response]}
  next: convert_bot_responses_to_messages

extract_bot_responses:
  assign:
    botMsg: ${post_message_to_bot_result.response.body}
    botMsgTxt: ${post_message_to_bot_result.response.body?.[0]?.text}
  next: convert_bot_responses_to_messages

extract_bot_responses_revenue_with_buttons:
  assign:
    buttonPrefix: "#revenue"
  next: extract_companies

extract_bot_responses_service1_with_buttons:
  assign:
    buttonPrefix: "#employees"
  next: extract_companies

extract_bot_responses_national_tax_with_buttons:
  assign:
    buttonPrefix: "#taxes"
  next: extract_companies

extract_bot_responses_workforce_tax_with_buttons:
  assign:
    buttonPrefix: "#workforcetaxes"
  next: extract_companies

extract_bot_responses_beneficiaries_with_buttons:
  assign:
    buttonPrefix: "#beneficiaries"
  next: extract_companies

extract_bot_responses_related_people_with_buttons:
  assign:
    buttonPrefix: "#relatedpersons"
  next: extract_companies

extract_bot_responses_company_details_with_buttons:
  assign:
    buttonPrefix: "#companydata"
  next: extract_companies

extract_bot_responses_simple_company_with_buttons:
  assign:
    buttonPrefix: "#companydatasimple"
  next: extract_companies

extract_companies:
  assign:
    companies: ${common_service_revenue1_result.response.body.response.companies}

addButtonsToFirstBotMessage:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/add_buttons_to_first_message"
    headers:
      type: json
    body:
      messages: ${post_message_to_bot_result.response.body}
      ignoreTexts: ["OPENSEARCH", "REVENUEOPENSEARCH", "NATIONALTAXOPENSEARCH", "WORKFORCETAXOPENSEARCH", "BENEFICIARIESOPENSEARCH", "RELATEDPEOPLEOPENSEARCH", "COMPANYDETAILSOPENSEARCH", "SIMPLECOMPANYOPENSEARCH"]
      prefix: ${buttonPrefix}
      companies: ${companies}
  result: merged_messages_res

extractMergedResult:
  assign:
    botMsg: ${merged_messages_res.response.body}

convert_bot_responses_to_messages:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/bot_responses_to_messages"
    headers:
      type: json
    body:
      data:
        {
          "botMessages": "${botMsg}",
          "chatId": "${chatId}",
          "authorId": "${get_bot_name_result.response.body[0].value}",
          "authorFirstName": "",
          "authorLastName": "",
          "authorTimestamp": "${new Date().toISOString()}",
          "created": "${new Date().toISOString()}",
        }
  result: converted_messages_res
  next: add_bot_message_to_db

convert_fallback_bot_responses_to_messages:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/bot_responses_to_messages"
    headers:
      type: json
    body:
      data:
        {
          "botMessages": "${fallback_bot_result}",
          "chatId": "${chatId}",
          "authorId": "${get_bot_name_result.response.body[0].value}",
          "authorFirstName": "",
          "authorLastName": "",
          "authorTimestamp": "${new Date().toISOString()}",
          "created": "${new Date().toISOString()}",
        }
  result: converted_messages_res
  next: add_bot_message_to_db

add_bot_message_to_db:
  switch:
    - condition: ${converted_messages_res.response.body?.length > 0}
      next: do_add_bot_message_to_db
  next: return_ok

do_add_bot_message_to_db: 
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-bot-message"
    body:
      messages: ${converted_messages_res.response.body}
  result: add_bot_message_to_bot_result
  next: return_message_sent

return_ok:
  status: 200
  return: "Service called successfully"
  next: end

return_is_holiday:
  status: 200
  return: "Today is a national holiday"
  next: end

return_organization_is_not_available_res:
  status: 200
  return: "Organization is not available"
  next: end

return_csa_is_not_available:
  status: 200
  return: "CSA's are not available"
  next: end

return_bot_error:
  status: 200
  return: "Bot error"
  next: end

return_message_sent:
  status: 200
  return: "Message Sent Successfully"
  next: end

return_chat_does_not_belong_to_bot:
  status: 200
  return: "Chat does not belong to bot"
  next: end

return_bot_is_not_active:
  status: 200
  return: "Bot is not active"
  next: end

return_bad_request:
  status: 400
  return: "Bad Request"
  next: end
