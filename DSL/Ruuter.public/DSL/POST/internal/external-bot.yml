---
declaration:
  call: declare
  version: 0.1
  description: Description placeholder for 'EXTERNAL-BOT'
  method: post
  accepts: json
  returns: json
  namespace: backoffice
  allowlist:
    body:
      - field: message
        type: string
        description: Body field 'message'
      - field: sender
        type: string
        description: Body field 'sender'
      - field: authorId
        type: string
        description: "Parameter 'authorId'"

extract_data:
  assign:
    currentDate: ${new Date().toISOString().split('T')[0]}
    sender: ${incoming.body.sender}
    authorId: ${incoming.body.authorId}

logstepAZURESAADAME:
  log: ${incoming.body.message}

assign_data_sources:
  assign:
    data_sources:
      - type: azure_search
        parameters:
          endpoint: "[#SEARCH_ENDPOINT]"
          index_name: "[#SEARCH_INDEX_NAME]"
          semantic_configuration: azureml-default
          query_type: vector_semantic_hybrid
          in_scope: true
          role_information: You are an AI assistant that helps people find information.
          filter: null
          strictness: 3
          top_n_documents: 7
          authentication:
            type: api_key
            key: "[#CHATBOT_EXTERNAL_KEY]"
          embedding_dependency:
            type: endpoint
            endpoint: "[#EMBEDDED_ENDPOINT_AZURE]"
            authentication:
              type: api_key
              key: "[#CHATBOT_EXTERNAL_API_KEY]"

logstepAZUREDS:
  log: ${data_sources}

assign_messages:
  assign:
    messages:
      - role: system
        content: You are a government AI assistant with general questions. All the
          answers MUST be in Estonian. If the question is in any other language
          than in Estonian, then translate the question into Estonian and the
          answer MUST also be in Estonian. Today's date is ${currentDate}.
      - role: user
        content: ${incoming.body.message}

logstepAZUREMSG:
  log: ${messages}

post_answer:
  call: http.post
  args:
    url: "[#CHATBOT_EXTERNAL_BOT_URL]"
    headers:
      Content-Type: application/json
      api-key: "[#CHATBOT_EXTERNAL_API_KEY]"
    body:
      data_sources: ${data_sources}
      messages: ${messages}
      temperature: 0
      top_p: 1
      max_tokens: 1000
      stream: false
      frequency_penalty: 0
      presence_penalty: 0
  result: test
  
logstepAZUREBOT:
  log: ${test}

assign_value:
  assign:
    correct_value:
      - recipient_id: ${sender}
        text: ${test.response.body.choices[0].message.content.replace(/\n/g,"\\n").replace(/%/g," protsenti").replace(" \. ", ". ")}
        context: ${test.response.body.choices[0].message.context}
  next: check_value

check_value:
  switch:
    - condition: ${correct_value === 'ERROR'}
      next: return_value
  next: format_messages
  
return_value:
  return: ${correct_value}
  next: end

format_messages:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/llm_responses_to_messages"
    headers:
      type: json
    body:
      data:
        {
          "botMessages": "${correct_value}",
          "chatId": "${sender}",
          "authorId": "${authorId}",
          "authorFirstName": "",
          "authorLastName": "",
          "authorTimestamp": "${new Date().toISOString()}",
          "created": "${new Date().toISOString()}",
        }
  result: converted_messages_res
  next: return_formatted_value

return_formatted_value:
  return: ${converted_messages_res.response.body.response}
  next: end 
