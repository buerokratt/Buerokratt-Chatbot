get_chat_info:
  call: http.post
  args:
   url: "[#CHATBOT_TIM]/jwt/custom-jwt-userinfo"
   contentType: plaintext
   headers:
    cookie: ${cookie}
   plaintext:
      "chatJwt"
  result: infoRes
  next: check_chat_info_response

check_chat_info_response:
  switch:
    - condition: ${200 <= infoRes.response.statusCodeValue && infoRes.response.statusCodeValue < 300}
      next: assignChatIdInfo
  next: return_bad_request

assignChatIdInfo:
  assign:
    chatId: ${infoRes.response.body.chatId}
    JWTCreated: ${infoRes.response.body.JWTCreated}
    JWTExpirationTimestamp: ${infoRes.response.body.JWTExpirationTimestamp}
  next: getActiveChatById

getActiveChatById:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-active-chat-by-id"
    body:
      id: ${chatId}
  result: activeChatRes
  next: checkActiveChatResult 

checkActiveChatResult:
  switch:
    - condition: ${activeChatRes.response.body.length > 0}
      next: assignChat
  next: return_chat_ended

assignChat:
  assign:
    activeChat: ${activeChatRes.response.body[0]}
  next: getMessagesToRedirect  

getMessagesToRedirect:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-redirection-messages-by-chatId"
    body:
      chatId: ${chatId}
  result: messagesToRedirectRes
  next: forwardChat

forwardChat:
  call: http.post
  args:
    url: "https://${messagesToRedirectRes.response.body[0].forwardTo}/destination-forward"
    body:
      messages: ${messagesToRedirectRes.response.body}
      endUserEmail: ${activeChat.endUserEmail}
      endUserPhone: ${activeChat.endUserPhone}
      endUserOs: ${activeChat.endUserOs}
      endUserUrl: ${activeChat.endUserUrl}
      originChatId: ${chatId}
      endUserFirstName: ${activeChat.endUserFirstName}
      endUserLastName: ${activeChat.endUserLastName}
      receivedFrom: "[#CHATBOT_RUUTER_PRIVATE]"
      endUserId: ${activeChat.endUserId}
  result: forwardChatRes
  next: get_session_length

get_session_length:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-configuration"
    body:
      key: "session_length"
  result: session_result
  next: updateChatJwt

updateChatJwt:
  call: http.post
  args:
    url: "[#CHATBOT_TIM]/jwt/custom-jwt-generate"
    body:
      chatId: ${chatId}
      JWTCreated: ${JWTCreated}
      JWTExpirationTimestamp: ${JWTExpirationTimestamp}
      forwardTo: ${activeChat.forwardTo}
  result: chatJwtRes
  next: assign_cookie

assign_cookie:
  assign:
    setCookie:
      redirectJwt: ${forwardChatRes.response.body.data.format_forward_destination_response.redirectJwt}
      maxAge: 7200
      Domain: "[#DOMAIN]"
      Secure: false
      HttpOnly: false
  next: redirectChat

redirectChat:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-chat"
    body:
      id: ${chatId}
      customerSupportId: ${activeChat.customerSupportId}
      customerSupportDisplayName: ${activeChat.customerSupportDisplayName}
      csaTitle: ${activeChat.csaTitle}
      endUserId: ${activeChat.endUserId}
      endUserFirstName: ${activeChat.endUserFirstName}
      endUserLastName: ${activeChat.endUserLastName}
      status: "REDIRECTED"
      endUserEmail: ${activeChat.endUserEmail}
      endUserPhone: ${activeChat.endUserPhone}
      endUserOs: ${activeChat.endUserOs}
      endUserUrl: ${activeChat.endUserUrl}
      feedbackText: ""
      feedbackRating: ""
      externalId: ${forwardChatRes.response.body.data.format_forward_destination_response.generatedChatId}
      created: ${activeChat.created}
      ended: ${new Date().toISOString()}
      forwardedTo: ${activeChat.forwardedTo}
      forwardedToName: ${activeChat.forwardedToName}
      receivedFrom: ${activeChat.receivedFrom}
      receivedFromName: ${activeChat.receivedFromName}
  result: redirectChatRes

getAvailableCSACount:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-available-csa-count"
  result: countRes

check_available_csa_count:
  switch:
    - condition: ${countRes.response.body.count > 0}
      next: add_chat_id_to_queue_notification_node
  next: getChatById

add_chat_id_to_queue_notification_node:
  call: http.post
  args:
    url: "[#CHATBOT_NOTIFICATIONS]/enqueue"
    body:
      id: ${chatId}
  result: add_chat_id_to_queue_notification_node_res

getChatById:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-chat-by-id"
    body:
      id: ${chatId}
  result: chat_result
  next: return_result

return_result:
  headers:
    Set-Cookie: ${setCookie}
  return: ${chat_result.response.body}
  next: end

return_bad_request:
  status: 400
  return: "Bad Request"
  next: end 

return_chat_ended:
  return: "Chat Has Ended"
  status: 400
  next: end  
