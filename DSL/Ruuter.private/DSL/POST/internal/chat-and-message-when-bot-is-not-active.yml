declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'CHAT-AND-MESSAGE-WHEN-BOT-IS-NOT-ACTIVE'"
  method: post
  accepts: json
  returns: json
  namespace: backoffice

getBotName:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-configuration"
    body:
      key: "bot_institution_id"
  result: bot_name_res

assignBotName:
  assign:
    botName: ${bot_name_res.response.body[0].value}

get_organization_base_config:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-organization-base-config"
  result: org_base_config_res
  next: assign_organization_base_config

assign_organization_base_config:
  assign:
    base_config: ${org_base_config_res.response.body[0]}

notify_chats_and_return_chats_and_messages:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-message-content-by-customer-support-id"
    body:
      customerSupportId: ${botName}
      authorId: ${botName}
      authorRole: "buerokratt"
      content: ${base_config.outsideWorkingHoursMessage}
      event: "${base_config.outsideWorkingHoursAskForContacts === 'true' ? 'unavailable_organization_ask_contacts' : 'unavailable_organization'}"
      created: ${new Date().toISOString()}
  result: res

map_open_chats_messages:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/return_open_chats_messages"
    headers:
      type: json
    body:
      data: ${res.response.body}
  result: open_chat_messages_res

map_open_chats_notifications:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/return_open_chats_notifications"
    headers:
      type: json
    body:
      data: ${res.response.body}
  result: open_chat_notifications_res

notify_end_users:
  template: messages/notify-all
  requestType: templates
  body:
    chats: ${open_chat_messages_res.response.body}
    notifications: ${open_chat_notifications_res.response.body}
  result: notification_res

return_result:
  return: "Success"
  next: end
