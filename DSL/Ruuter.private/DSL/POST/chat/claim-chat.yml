extractRequestData:
  assign:
    id: ${incoming.body.id}
    customerSupportId: ${incoming.body.customerSupportId}
    customerSupportDisplayName: ${incoming.body.customerSupportDisplayName}
    csaTitle: ${incoming.body.csaTitle}

getActiveChatById:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-active-chat-by-id"
    body:
      id: ${id}
  result: activeChatRes
  next: checkActiveChatResult 

checkActiveChatResult:
  switch:
    - condition: ${activeChatRes.response.body.length > 0}
      next: assignChat
  next: return_chat_ended

assignChat:
  assign:
    activeChat: ${activeChatRes.response.body[0]}
  next: claimChat

claimChat:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-chat"
    body:
      id: ${id}
      customerSupportId: ${customerSupportId}
      customerSupportDisplayName: ${customerSupportDisplayName}
      csaTitle: ${csaTitle}
      endUserId: ${activeChat.endUserId ?? ""}
      endUserFirstName: ${activeChat.endUserFirstName ?? ""}
      endUserLastName: ${activeChat.endUserLastName ?? ""}
      status: ${activeChat.status ?? "OPEN"}
      endUserEmail: ${activeChat.endUserEmail ?? ""}
      endUserPhone: ${activeChat.endUserPhone ?? ""}
      endUserOs: ${activeChat.endUserOs ?? ""}
      endUserUrl: ${activeChat.endUserUrl ?? ""}
      feedbackText: ""
      feedbackRating: ""
      externalId: ${activeChat.externalId ?? ""}
      created: ${activeChat.created ?? new Date().toISOString()}
      ended: ${activeChat.ended ?? ""}
      forwardedTo: ${activeChat.forwardedTo ?? ""}
      forwardedToName: ${activeChat.forwardedToName ?? ""}
      receivedFrom: ${activeChat.receivedFrom ?? ""}
      receivedFromName: ${activeChat.receivedFromName ?? ""}
  result: claimChatRes
  next: clearChatList

clearChatList:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_delete_by_query?conflicts=proceed"
    body:
     query:
      term:
       channelId: "chat-list"
  result: clear_chat_res
  next: postNotificationAboutAddedChat

postNotificationAboutAddedChat:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_doc"
    body:
     channelId: "chat-list"
     timestamp: ${new Date().toISOString()}
     payload: {
        "status": "Chat Status Changed",
        "chatId": ""
     }
  result: chat_notification_result
  next: getClaimedChat

getClaimedChat:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-active-chat-by-id"
    body:
      id: ${id}
  result: claimedChatRes

remove_chat_id_from_queue_notification_node_if_existed:
  call: http.post
  args:
    url: "[#CHATBOT_NOTIFICATIONS]/dequeue"
    body:
      id: ${id}
  result: remove_chat_id_from_queue_notification_node_if_existed_res

return_result:
  return: ${claimedChatRes.response.body}
  next: end

return_chat_ended:
  return: "Chat Has Ended"
  status: 400
  next: end  
