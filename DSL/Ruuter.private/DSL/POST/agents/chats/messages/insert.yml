declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'INSERT'"
  method: post
  accepts: json
  returns: json
  namespace: backoffice
  allowlist:
    body:
      - field: authorFirstName
        type: string
        description: "Body field 'authorFirstName'"
      - field: authorId
        type: string
        description: "Body field 'authorId'"
      - field: authorRole
        type: string
        description: "Body field 'authorRole'"
      - field: authorTimestamp
        type: string
        description: "Body field 'authorTimestamp'"
      - field: chatId
        type: string
        description: "Body field 'chatId'"
      - field: content
        type: string
        description: "Body field 'content'"
      - field: event
        type: string
        description: "Body field 'event'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

extractRequestData:
  assign:
    chatId: ${incoming.body.chatId}
    authorId: ${incoming.body.authorId}
    authorFirstName: ${incoming.body.authorFirstName}
    authorRole: ${incoming.body.authorRole}
    authorTimestamp: ${incoming.body.authorTimestamp}
    content: ${incoming.body.content}
    event: ${incoming.body.event}
    cookie: ${incoming.headers.cookie}
  next: get_user_info

get_user_info:
  call: http.post
  args:
   url: "[#CHATBOT_TIM]/jwt/custom-jwt-userinfo"
   contentType: plaintext
   headers:
    cookie: ${cookie}
   plaintext: 
      "customJwtCookie"
  result: res
  next: check_user_info_response

check_user_info_response:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: assignIdCode
  next: return_bad_request

assignIdCode:
  assign:
    idCode: ${res.response.body.idCode}
  next: getUuid

getUuid:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/return_uuid"
    headers:
      type: json
  result: uuid_result
  next: assignUuid

assignUuid:
  assign:
    uuid: ${uuid_result.response.body.uuid}
  next: insertMessage  

insertMessage:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-message"
    body:
      chatId: ${chatId}
      messageId: ${uuid}
      content: ${content ?? ""}
      authorTimestamp: ${authorTimestamp ?? new Date().toISOString()}
      authorId: ${idCode}
      authorFirstName: ${authorFirstName ?? ""}
      authorRole: ${authorRole ?? "backoffice-user"}
      created: ${new Date().toISOString()}
      authorLastName: ""
      rating: ""
      event: ${event ?? ""}
      forwardedByUser: ""
      forwardedFromCsa: ""
      forwardedToCsa: ""
  result: insertMessageResult
  next: clearChatList

clearChatList:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_delete_by_query?conflicts=proceed"
    body:
     query:
      term:
       channelId: "chat-list"
  result: clear_chat_res
  next: postNotificationAboutAddedChat

postNotificationAboutAddedChat:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_doc"
    body:
     channelId: "chat-list"
     timestamp: ${new Date().toISOString()}
     payload: {
        "status": "Chat Status Changed",
        "chatId": "${chatId}"
     }
  result: chat_notification_result
  next: clearMessages

clearMessages:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_delete_by_query?conflicts=proceed"
    body:
     query:
      term:
       channelId: ${chatId}
  result: clear_messages_res
  next: postNotificationAboutMessageResponse 

postNotificationAboutMessageResponse:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_doc"
    body:
     channelId: ${chatId}
     timestamp: ${new Date().toISOString()}
     payload: {
        "type": "message",
        "messageId": "${uuid}"
     }
  result: message_notification_result
  next: return_result   

return_result:
  return: "Message Sent Successfully"
  next: end

return_bad_request:
  status: 400
  return: false
  next: end  

