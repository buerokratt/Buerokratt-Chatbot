declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'ASSIGN'"
  method: post
  accepts: json
  returns: json
  namespace: backoffice
  allowlist:
    body:
      - field: csaTitle
        type: string
        description: "Body field 'csaTitle'"
      - field: customerSupportDisplayName
        type: string
        description: "Body field 'customerSupportDisplayName'"
      - field: customerSupportId
        type: string
        description: "Body field 'customerSupportId'"
      - field: id
        type: string
        description: "Body field 'id'"

extractRequestData:
  assign:
    id: "${incoming.body.id}"
    customerSupportId: "${incoming.body.customerSupportId}"
    customerSupportDisplayName: "${incoming.body.customerSupportDisplayName}"
    csaTitle: "${incoming.body.csaTitle}"

getActiveChatById:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-chat-by-id"
    body:
      id: ${id}
  result: activeChatRes
  next: checkActiveChatResult 

checkActiveChatResult:
  switch:
    - condition: ${activeChatRes.response.body.length > 0}
      next: assignChat
  next: return_chat_ended

assignChat:
  assign:
    activeChat: ${activeChatRes.response.body[0]}
  next: assignPendingChat

assignPendingChat:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-chat"
    body:
      id: ${id}
      customerSupportId: ${customerSupportId}
      customerSupportDisplayName: ${customerSupportDisplayName}
      csaTitle: ${csaTitle}
      endUserId: ${activeChat.endUserId ?? ""}
      endUserFirstName: ${activeChat.endUserFirstName ?? ""}
      endUserLastName: ${activeChat.endUserLastName ?? ""}
      status: "IDLE"
      endUserEmail: ${activeChat.endUserEmail ?? ""}
      endUserPhone: ${activeChat.endUserPhone ?? ""}
      endUserOs: ${activeChat.endUserOs ?? ""}
      endUserUrl: ${activeChat.endUserUrl ?? ""}
      feedbackText: ""
      feedbackRating: ""
      externalId: ${activeChat.externalId ?? ""}
      created: ${activeChat.created ?? new Date().toISOString()}
      ended: ${activeChat.ended ?? ""}
      forwardedTo: ${activeChat.forwardedTo ?? ""}
      forwardedToName: ${activeChat.forwardedToName ?? ""}
      receivedFrom: ${activeChat.receivedFrom ?? ""}
      receivedFromName: ${activeChat.receivedFromName ?? ""}
  result: assignPendingChatRes
  next: getUuid

getUuid:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/hbs/chat-bot/return_uuid"
    headers:
      type: json
  result: uuid_result
  next: assignUuid

assignUuid:
  assign:
    uuid: ${uuid_result.response.body.uuid}
  next: insertMessage  

insertMessage:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-message"
    body:
      chatId: ${activeChat.id ?? uuid}
      messageId: ${uuid}
      content: ""
      authorTimestamp: ${new Date().toISOString()}
      authorId: ${customerSupportId}
      authorFirstName: ${customerSupportDisplayName}
      authorRole: "buerokratt"
      created: ${new Date().toISOString()}
      authorLastName: ""
      rating: ""
      event: "pending-assigned"
      forwardedByUser: ""
      forwardedFromCsa: ""
      forwardedToCsa: ""
  result: insertMessageResult
  next: clearChatList

clearChatList:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_delete_by_query?conflicts=proceed"
    body:
     query:
      term:
       channelId: "chat-list"
  result: clear_chat_res
  next: postNotificationAboutAddedChat

postNotificationAboutAddedChat:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_doc"
    body:
     channelId: "chat-list"
     timestamp: ${new Date().toISOString()}
     payload: {
        "status": "Chat Status Changed",
        "chatId": "${id}"
     }
  result: chat_notification_result
  next: getRedirectedChat

getRedirectedChat:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-active-chat-by-id"
    body:
      id: ${id}
  result: redirectedChatRes
  next: clearMessages

clearMessages:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_delete_by_query?conflicts=proceed"
    body:
     query:
      term:
       channelId: ${activeChat.id ?? uuid}
  result: clear_messages_res
  next: postNotificationAboutMessageResponse 

postNotificationAboutMessageResponse:
  call: http.post
  args:
    url: "[#CHATBOT_OPENSEARCH]/notifications/_doc"
    body:
     channelId: ${activeChat.id ?? uuid}
     timestamp: ${new Date().toISOString()}
     payload: {
        "type": "message",
        "messageId": "${uuid}"
     }
  result: message_notification_result

remove_chat_id_from_queue_notification_node_if_existed:
  call: http.post
  args:
    url: "[#CHATBOT_NOTIFICATIONS]/dequeue"
    body:
      id: ${id}
  result: remove_chat_id_from_queue_notification_node_if_existed_res

return_result:
  return: ${assignPendingChatRes.response.body}
  next: end

return_chat_ended:
  return: "Chat Has Ended"
  status: 400
  next: end 
