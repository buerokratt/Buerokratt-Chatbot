declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'ACTIVE'"
  method: post
  accepts: json
  returns: json
  namespace: backoffice
  allowlist:
    body:
      - field: isActive
        type: string
        description: "Body field 'isActive'"

extractRequestData:
  assign:
    isActive: ${incoming.body.isActive}

setConfigurationValue:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/set-configuration-value"
    body:
      created: ${new Date().toISOString()}
      key: "is_bot_active"
      value: ${isActive}
  result: setConfigurationResult

check_if_bot_is_active:
  switch:
    - condition: ${isActive === 'true' || isActive === true}
      next: return_result
  next: insertChatAndMessageWhenBotNotActive

insertChatAndMessageWhenBotNotActive:
  call: http.post
  args:
    url: "[#CHATBOT_RUUTER_PRIVATE_INTERNAL]/internal/chat-and-message-when-bot-is-not-active"
  result: insertChatAndMessageWhenBotNotActiveResult
  next: return_result

return_result:
  return: ${isActive}
  status: 200
