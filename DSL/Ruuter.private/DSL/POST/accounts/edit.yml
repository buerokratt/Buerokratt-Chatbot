declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'EDIT'"
  method: post
  accepts: json
  returns: json
  namespace: backoffice
  allowlist:
    body:
      - field: csaTitle
        type: string
        description: "Body field 'csaTitle'"
      - field: csa_email
        type: string
        description: "Body field 'csa_email'"
      - field: displayName
        type: string
        description: "Body field 'displayName'"
      - field: firstName
        type: string
        description: "Body field 'firstName'"
      - field: lastName
        type: string
        description: "Body field 'lastName'"
      - field: roles
        type: array
        description: "Body field 'roles'"
      - field: userIdCode
        type: string
        description: "Body field 'userIdCode'"

extractRequestData:
  assign:
    firstName: ${incoming.body.firstName}
    lastName: ${incoming.body.lastName}
    userIdCode: ${incoming.body.userIdCode}
    displayName: ${incoming.body.displayName}
    csaTitle: ${incoming.body.csaTitle}
    csa_email: ${incoming.body.csa_email}
    roles: ${incoming.body.roles}
 
getUser:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-user"
    body:
      userIdCode: ${userIdCode}
  result: res
  next: checkIfUserExists

checkIfUserExists:
  switch:
    - condition: "${res.response.body.length > 0}"
      next: updateUser
  next: return_not_exists

updateUser:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/update-user"
    body:
      created: ${new Date().toISOString()}
      status: "active"
      firstName: ${firstName}
      lastName: ${lastName}
      userIdCode: ${userIdCode}
      displayName: ${displayName}
      csaTitle: ${csaTitle}
      csaEmail: ${csa_email}
  result: add_user_res
  next: updateRoles

updateRoles:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-user-role"
    body:
      userIdCode: ${userIdCode}
      roles: ${roles}
      created: ${new Date().toISOString()}
  result: add_roles_res
  next: return_result

return_result:
  return: "User updated successfully"
  status: 200
  next: end

return_not_exists:
  return: "error: user does not exist"
  status: 400
  next: end

