declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'EDIT'"
  method: post
  accepts: json
  returns: json
  namespace: backoffice
  allowlist:
    body:
      - field: authorFirstName
        type: string
        description: "Body field 'authorFirstName'"
      - field: authorId
        type: string
        description: "Body field 'authorId'"
      - field: authorRole
        type: string
        description: "Body field 'authorRole'"
      - field: authorTimestamp
        type: string
        description: "Body field 'authorTimestamp'"
      - field: chatId
        type: string
        description: "Body field 'chatId'"
      - field: content
        type: string
        description: "Body field 'content'"
      - field: event
        type: string
        description: "Body field 'event'"
      - field: originalBaseId
        type: string
        description: "Body field 'originalBaseId'"
      - field: originalCreated
        type: string
        description: "Body field 'originalCreated'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

extractRequestData:
  assign:
    chatId: ${incoming.body.chatId}
    authorId: ${incoming.body.authorId}
    authorFirstName: ${incoming.body.authorFirstName}
    authorRole: ${incoming.body.authorRole}
    authorTimestamp: ${incoming.body.authorTimestamp}
    content: ${incoming.body.content}
    event: ${incoming.body.event}
    originalBaseId: ${incoming.body.originalBaseId}
    originalCreated: ${incoming.body.originalCreated}
    cookie: ${incoming.headers.cookie}
  next: get_user_info

get_user_info:
  call: http.post
  args:
   url: "[#CHATBOT_TIM]/jwt/custom-jwt-userinfo"
   contentType: plaintext
   headers:
    cookie: ${cookie}
   plaintext: 
      "customJwtCookie"
  result: res
  next: check_user_info_response

check_user_info_response:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: assignIdCode
  next: return_bad_request

assignIdCode:
  assign:
    idCode: ${res.response.body.idCode}
  next: getUuid

getUuid:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER_HBS]/return_uuid"
    headers:
      type: json
  result: uuid_result
  next: assignUuid

assignUuid:
  assign:
    uuid: ${uuid_result.response.body.uuid}

check_is_edited_message:
  switch:
    - condition: ${originalBaseId != null}
      next: getOriginalMessageById
  next: return_bad_request

getOriginalMessageById:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-message-by-id"
    body:
      id: ${originalBaseId}
  result: original_message

check_message_belongs_to_author:
  switch:
    - condition: ${original_message.response.body[0].authorId == idCode}
      next: getBotConfig
  next: return_bad_request

getBotConfig:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-bot-config"
  result: configRes

check_is_editing_Allowed:
  switch:
    - condition: ${configRes.response.body[0].isEditChatVisible == 'true'}
      next: insertEditedMessage
  next: return_message_edit_not_allowed

insertEditedMessage:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-edited-message"
    body:
      chatId: ${chatId}
      messageId: ${uuid}
      content: ${content ?? ""}
      authorTimestamp: ${authorTimestamp ?? new Date().toISOString()}
      authorId: ${idCode}
      authorFirstName: ${authorFirstName ?? ""}
      authorRole: ${authorRole ?? "backoffice-user"}
      created: ${originalCreated}
      authorLastName: ""
      rating: ""
      event: ${event ?? ""}
      forwardedByUser: ""
      forwardedFromCsa: ""
      forwardedToCsa: ""
      originalBaseId: ${originalBaseId}
  result: insertMessageResult
  next: getMessageById

getMessageById:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-message-by-id"
    body:
      id: ${uuid}
  result: message_res

notify_chats:
  template: "[#CHATBOT_PROJECT_LAYER]/chats/notify"
  requestType: templates
  body:
    chatId: ${chatId}
  result: chats_notify_res
  next: notify_messages

notify_messages:
  template: "[#CHATBOT_PROJECT_LAYER]/messages/notify"
  requestType: templates
  body:
    chatId: ${chatId}
    type: "message"
    messageId: ${uuid}
  result: messages_notify_res
  next: return_result

return_result:
  return: ${message_res.response.body[0]}
  next: end

return_bad_request:
  status: 400
  return: false
  next: end  

return_message_edit_not_allowed:
  status: 409
  return: "Message editing not allowed."
  next: end  

