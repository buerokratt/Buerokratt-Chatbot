declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'Delete conversations cron'"
  method: post
  accepts: json
  returns: json
  namespace: training
  allowlist:
    body:
      - field: expression
        type: string
        description: "Body field 'expression'"
      - field: anonEnabled
        type: boolean
        description: "Body field 'anonEnabled'"
      - field: authEnabled
        type: boolean
        description: "Body field 'authEnabled'"

assignCronFileLocation:
  assign:
    cronFileLocation: "/CronManager/delete_conversations.yml"
    expression: ${incoming.body.expression}
    anonEnabled: ${incoming.body.anonEnabled}
    authEnabled: ${incoming.body.authEnabled}

checkCronFile:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/file-manager/exists"
    body:
      file_path: ${cronFileLocation}
  result: fileExists

checkForDeletion:
  switch:
    - condition: ${fileExists.response.body.error === false && !anonEnabled && !authEnabled}
      next: deleteCronTask
    - condition: ${fileExists.response.body.error === true && !anonEnabled && !authEnabled}
      next: returnSuccess
  next: createAuthCronJson

deleteCronTask:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/file-manager/delete"
    body:
      file_path: ${cronFileLocation}
  result: deleted
  next: returnSuccess

createAuthCronJson:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER_HBS]/delete_conversations_cron"
    headers:
      type: "json"
    body:
      cronExpression: ${expression}
      command: "./scripts/remove-auth-conversations.sh"
  result: authCronJson

createAnonCronJson:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER_HBS]/delete_conversations_cron"
    headers:
      type: "json"
    body:
      cronExpression: ${expression}
      command: "./scripts/remove-anonym-conversations.sh"
  result: anonCronJson

checkAuthConditions:
  switch:
    - condition: ${anonEnabled && authEnabled}
      next: convertFullJsonToYaml
    - condition: ${!anonEnabled && authEnabled}
      next: convertAuthJsonToYaml
  next: convertAnonJsonToYaml

convertAnonJsonToYaml:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/conversion/json_to_yaml"
    body:
      anon_conversations: ${anonCronJson.response.body}
  result: converted
  next: saveFile

convertAuthJsonToYaml:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/conversion/json_to_yaml"
    body:
      auth_conversations: ${authCronJson.response.body}
  result: converted
  next: saveFile

convertFullJsonToYaml:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/conversion/json_to_yaml"
    body:
      anon_conversations: ${anonCronJson.response.body}
      auth_conversations: ${authCronJson.response.body}
  result: converted
  next: saveFile

saveFile:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/file-manager/create"
    body:
      file_path: ${cronFileLocation}
      content: ${converted.response.body.json}
  result: fileResult

refreshCronManager:
  call: http.post
  args:
    url: "[#CHATBOT_CRON_MANAGER]/reload/delete_conversations"
  result: cronResult
  next: returnSuccess

returnSuccess:
  return: "Cron Task updated."
  next: end

returnError:
  return: "Could not get data from DB."
  next: end
