declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'CLAIM'"
  method: post
  accepts: json
  returns: json
  namespace: backoffice
  allowlist:
    body:
      - field: csaTitle
        type: string
        description: "Body field 'csaTitle'"
      - field: customerSupportDisplayName
        type: string
        description: "Body field 'customerSupportDisplayName'"
      - field: customerSupportId
        type: string
        description: "Body field 'customerSupportId'"
      - field: id
        type: string
        description: "Body field 'id'"

extractRequestData:
  assign:
    id: ${incoming.body.id}
    customerSupportId: ${incoming.body.customerSupportId}
    customerSupportDisplayName: ${incoming.body.customerSupportDisplayName}
    csaTitle: ${incoming.body.csaTitle}

getActiveChatById:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-active-chat-by-id"
    body:
      id: ${id}
  result: activeChatRes
  next: checkActiveChatResult 

checkActiveChatResult:
  switch:
    - condition: ${activeChatRes.response.body.length > 0}
      next: assignChat
  next: return_chat_ended

assignChat:
  assign:
    activeChat: ${activeChatRes.response.body[0]}
  next: claimChat

claimChat:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-chat"
    body:
      id: ${id}
      customerSupportId: ${customerSupportId}
      customerSupportDisplayName: ${customerSupportDisplayName}
      csaTitle: ${csaTitle}
      endUserId: ${activeChat.endUserId ?? ""}
      endUserFirstName: ${activeChat.endUserFirstName ?? ""}
      endUserLastName: ${activeChat.endUserLastName ?? ""}
      status: ${activeChat.status ?? "OPEN"}
      endUserEmail: ${activeChat.endUserEmail ?? ""}
      endUserPhone: ${activeChat.endUserPhone ?? ""}
      endUserOs: ${activeChat.endUserOs ?? ""}
      endUserUrl: ${activeChat.endUserUrl ?? ""}
      feedbackText: ""
      feedbackRating: ""
      externalId: ${activeChat.externalId ?? ""}
      created: ${activeChat.created ?? new Date().toISOString()}
      ended: ${activeChat.ended ?? ""}
      forwardedTo: ${activeChat.forwardedTo ?? ""}
      forwardedToName: ${activeChat.forwardedToName ?? ""}
      receivedFrom: ${activeChat.receivedFrom ?? ""}
      receivedFromName: ${activeChat.receivedFromName ?? ""}
  result: claimChatRes
  next: getMessageUuid

getMessageUuid:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER_HBS]/return_uuid"
    headers:
      type: json
  result: message_uuid_result
  next: assignMessageUuid

assignMessageUuid:
  assign:
    messageUuid: ${message_uuid_result.response.body.uuid}
  next: insertMessage

insertMessage:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/insert-message"
    body:
      chatId: ${activeChat.id}
      messageId: ${messageUuid}
      content: ""
      authorTimestamp: ${new Date().toISOString()}
      authorId: ""
      authorFirstName: ""
      authorRole: "buerokratt"
      created: ${new Date().toISOString()}
      authorLastName: ""
      rating: ""
      event: "taken-over"
      forwardedByUser: ""
      forwardedFromCsa: ""
      forwardedToCsa: ""
  result: insertMessageResult
  next: notify_chats

notify_chats:
  template: "[#CHATBOT_PROJECT_LAYER]/chats/notify"
  requestType: templates
  body:
    chatId: ${activeChat.id}
  result: chats_notify_res
  next: getClaimedChat

getClaimedChat:
  call: http.post
  args:
    url: "[#CHATBOT_RESQL]/get-active-chat-by-id"
    body:
      id: ${id}
  result: claimedChatRes

notify_messages:
  template: "[#CHATBOT_PROJECT_LAYER]/messages/notify"
  requestType: templates
  body:
    chatId: ${activeChat.id}
    type: "message"
    messageId: ${messageUuid}
  result: messages_notify_res

remove_chat_id_from_queue_notification_node_if_existed:
  call: http.post
  args:
    url: "[#CHATBOT_NOTIFICATIONS]/dequeue"
    body:
      id: ${id}
  result: remove_chat_id_from_queue_notification_node_if_existed_res

return_result:
  return: ${claimedChatRes.response.body}
  next: end

return_chat_ended:
  return: "Chat Has Ended"
  status: 400
  next: end  
